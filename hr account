select * from EMPLOYEES;
select * from DEPARTMENTS;
select * from JOBS;
select * from JOB_HISTORY;
select * from EMP_DETAILS_VIEW;
select * from COUNTRIES;
select * from LOCATIONS;
select * from REGIONS;

2. 사원번호가 176인 사람의 LAST_NAME 과 부서 번호를 조회한다,

SELECT LAST_NAME, DEPARTMENT_ID 
FROM employees 
where employee_id = 176;

3. 연봉이 5000 에서 12000의　이외인 사람들의 LAST_NAME 및 연봉을 조회한다.

SELECT LAST_NAME, SALARY 
FROM employees 
where salary ＜= 5000 and salary ＞= 12000;

4. 2002/02/20 일부터 2008/05/01 사이에 고용된 사람들의 LAST_NAME , 사번 , 고용일지를 조회한다.

SELECT LAST_NAME , EMPLOYEE_ID , HIRE_DATE 
from employees 
where HIRE_DATE >= '2002/02/20' and HIRE_DATE <= '2008/05/01';

5. 20 번 및 50번 부서에서 근무하는 모든 사람드르이 LAST_NAME 및 부서 번호를 조회한다. 단, LAST_NAME의 알파벳순으로 정렬한다.

SELECT LAST_NAME , DEPARTMENT_ID 
FROM employees 
where DEPARTMENT_ID = 20 OR DEPARTMENT_ID =50　
order by Last_name asc;

6. 20번 및 50번 부서에 근무하며, 연봉이 5000~12000 사이인 사원드르이 LAST_NAME 및 연봉을 조회한다.

SELECT LAST_NAME , SALARY 
FROM employees
where DEPARTMENT_ID = 20 OR DEPARTMENT_ID =50 and SALARY BETWEEN 5000 and 12000;

7. 2004년도에 고용된 모든 사람들의 LAST_NAME 및 고용일을 조회한다.
SELECT LAST_NAME , HIRE_DATE
FROM EMPLOYEES
where HIRE_DATE like '04%';

8-1. 매니저가 없는 사람들의 LAST_NAME 및 JOB_ID 를 조회한다.

SELECT LAST_NAME, JOB_ID
FROM EMPLOYEES
where MANAGER_ID is null
or MANAGER_ID = '';

8-2. 매니저가 있는 사람들의 LAST_NAME 및 JOB_ID를 조회한다.

SELECT LAST_NAME, JOB_ID
FROM EMPLOYEES
where MANAGER_ID is not null
or MANAGER_ID != '';

9. 커미션을 버는 모든 사람들의 LAST_NAME , 연봉 및 커미션을 조회한다.

SELECT LAST_NAME , SALARY , COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT is not null
order by salary, COMMISSION_PCT desc;

10. LAST_NAME 의 4번쨰 글자가 a인 사원들의 LAST_NAME 을 조회한다.

SELECT  LAST_NAME
FROM    EMPLOYEES
WHERE   LAST_NAME LIKE '___a%';

11. LAST_NAME 에 A 및(OR) e 글자가 있는 사람들의 LAST_NAME 을 조회한다.

SELECT LAST_NAME
FROM EMPLOYEES
WHERE LAST_NAME LIKE '%a%' OR LAST_NAME LIKE '%e%';

12. 연봉이 2500 , 3500 , 7000 이 아니며 직업이 SA_REP 이나 ST_CLERK 인 사람들을 조회한다. (LAST_NAME, SALARY , JOB_ID)

SELECT LAST_NAME , SALARY , JOB_ID
FROM EMPLOYEES
WHERE SALARY not in(2500,3500,6700) and JOB_ID in ('SA_REP','ST_CLERK');

13-1. 직업이 AD_PRESS 인 사람은 A 등급을, ST_MAN 인 사람은 B 등급을, IT_PROG 인 사람은 C 등급을,
      SA_REP 인 사람은 D 등급을, ST_CLERK 인 사람은 E 등급을 기타는 0 을 부여하여 조회한다.

SELECT EMPLOYEE_id , FIRST_NAME , LAST_NAME , DECODE(JOB_ID , 'AD_PRESS' , 'A', 'ST_MAN' , 'B' , 'IT_PROG' , 'C' , 'SA_REP' , 'D' , 'ST_CLERK', 'E' ,'0')
FROM EMPLOYEES;

13-2. CASE 문을 이용하시오.
CASE 조건의 대상이 되는 컬럼명 WHEN 조건1 THEN 조건 1이 참일떄 결과
						WHEN 조건2 THEN 조건2이 참일떄 결과 ...
						....
						ELSE 어떤 조건에도 맞지 않을 떄의 출력값
						END AS 별칭

select employee_id, First_name, case Job_id when 'AD_PRES' then 'A'
                                            when  'ST_MAN' then 'B'
                                            when 'IT_PROG' then 'C'
                                            when 'SA_REP' then 'D'
                                            Else 'E'
                                            END as Grade
from employees;

14. 모든 사람들의 LAST_NAME, 부서 이름 및 부서 번호를 조회한다.
SELECT LAST_NAME ,D.department_ID,department_name
FROM DEPARTMENTS D, employees E
where D.department_ID = E.department_ID;

15. 부서번호 30과 90의 모드 작업들을 유일한,포멧(중복제외) 으로 조회한다.
job_id,department_id, department_name 

SELECT DISTINCT E.JOB_ID ,E.department_ID, D.department_name
FROM DEPARTMENTS D, employees E
where D.department_ID = E.department_ID and D.department_id in(30,90)
order by E.job_id;

16-1. 커미션을 버는 모든 사람들의 LAST_NAME , 부서 명, 지역 ID 및 도시 명을 조회한다.

SELECT E.LAST_NAME , D.department_name , L.LOCATION_ID , L.CITY
FROM employees E , departments D , locations L
WHERE E.department_id = D.department_id and D.location_id = L.location_id and commission_PCT is not null;

16-2. 옥스포드에 사는 사람 중 커미션을 버는 모든 사람들의 LAST_name, 부서 명, 지역 ID 및 도시 명을 조회한다.

SELECT E.LAST_NAME , D.department_name , L.LOCATION_ID , L.CITY
FROM employees E , departments D , locations L
WHERE E.department_id = D.department_id and D.location_id = L.location_id 
and commission_PCT is not null
AND L.LOCATION_ID = (SELECT LOCATION_ID FROM LOCATIONS WHERE CITY = 'Oxford');
/*서브쿼리 , 인라인뷰를 이용*/

17. LAST_NAME 이 DAVIES 인 사람보다 후에 고용된 사원들의 LAST_NAME 및 HIRE_DATE 룰 조회한다.(조건문에 인라인뷰 사용)

SELECT LAST_NAME , HIRE_DATE
from employees
where (select hire_date from employees where last_name = 'Davies') < HIRE_DATE;

18.Popp보다 급여가 높은 사람의 LAST_NAME 과 급여를 조회하시오.(서브쿼리이용)

SELECT LAST_NAME,SALARY
FROM EMPLOYEES
WHERE SALARY > (SELECT SALARY FROM EMPLOYEES WHERE LAST_NAME = 'Popp');

19. 부서번호가 100인 부서에 속하 사원 중 전체 사원의 평균급여보다 높은 급여를 받는 사원의 LAST_NAME , 급여, 소속부서명을 조회하시오.(조건문에 서브쿼리 이용)

SELECT E.LAST_NAME,E.SALARY,D.DEPARTMENT_NAME
FROM DEPARTMENTS D , EMPLOYEES E
WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID 
and E.DEPARTMENT_ID = 100 
and E.SALARY >(SELECT AVG(SALARY) FROM EMPLOYEES );

20.각부서별 최고 급여(조건문의 서브쿼릴로 조회)를 받는 사람의 LAST_NAME ,급여,소속부서명을 조회하시오.

SELECT E.LAST_NAME , E.SALARY , D.DEPARTMENT_NAME
FROM DEPARTMENTS D , EMPLOYEES E
WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID 
and (D.DEPARTMENT_ID , E.SALARY)IN (SELECT DEPARTMENT_ID,MAX(SALARY) FROM EMPLOYEES group by DEPARTMENT_ID);

21. 부서번호가 100인 사람의 사원번호, LAST_NAME ,부서이름을 조회하시오. (인라인뷰 사용 -- FROM 절에 사용하는 쿼리문 이용)

SELECT EMPLOYEE_ID , LAST_NAME , DEPARTMENT_NAME
FROM (SELECT * FROM EMPLOYEES WHERE DEPARTMENT_id = 100)  E100 ,DEPARTMENTS D
WHERE D.DEPARTMENT_ID = E100.DEPARTMENT_ID;

22. 사람들의 LAST_NAME ,부서번호 , 부서명을 조회하시오 . ( 스킬라서브쿼리 -- SELECT 절에 사용하는 쿼리문 이용)

SELECT LAST_NAME , DEPARTMENT_ID , 
(SELECT DEPARTMENT_NAME FROM DEPARTMENTS D WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID )
FROM EMPLOYEES E;

23. 전체 사원중 AUstuin 과 같은 직책 ( job_id ) 인 사람들의 사원번호와 부서명을 출력하시오.
SELECT EMPLOYEE_ID , DEPARTMENT_NAME
FROM DEPARTMENTS D , EMPLOYEES E
WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID and (SELECT JOB_ID FROM EMPLOYEES WHERE LAST_NAME = 'Austin') = JOB_ID;

24. 전체 사원의 평균급여보다 높은 급여를 받는 사원드르이 사원번호, 부서명 , 도서명을 출력하시오.
SELECT EMPLOYEE_ID , DEPARTMENT_NAME , CITY
FROM DEPARTMENTS D , EMPLOYEES E , LOACTIONS L
WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID and D.LOCATION_ID = L.LOCATION_ID 
and (SELECT AVG(SALARY)FROM EMPLOYEES)< SALARY
ORDER BY SALARY DESC;

25. 110번 부서에서 근무하는 사원중에 30번 부서에는 졵하지 않는 직책을 가진 사람의 LAST_NAME 과 부서명을 출력하시오.
SELECT LAST_NAME , DEPARTMENT_NAME 
FROM DEPARTMENTS D , EMPLOYEES E
WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID and D.DEPARTMENT_ID = 110 
and job_id not in(SELECT JOB_ID FROM EMPLOYEES WHERE DEPARTMENT_ID = 30);

26. 직책(job_id)이 SA_MAN 인 사람들의 최고급여보다 높은 급여를 받는 사원의 사원번호와 습여를 출력하시오.
SELECT EMPLOYEE_ID ,SALARY
FROM EMPLOYEES
WHERE (SELECT MAX(SALARY) FROM EMPLOYEES WHERE JOB_ID = 'SA_MAN') < SALARY;

27. 회사 전체의 최대 연봉, 최소연봉 , 연봉 총 합 및 평균 연봉을 자연수로 포멧(ROUND) 하여 조회한다.
SELECT MAX(SALARY), MIN(SALARY) , SUN(SALARY) , ROUND(AVG(SALARY))FROM EMPLOYEES;

28. 각 JOB_ID 별, 최대연봉 , 최소연봉 , 연봉 총 합 및 평균 연봉을 자연수로 포멧하여 조회한다. (JOB_ID 오름차순)
SELECT MAX(SALARY), MIN(SALARY) , SUM(SALARY) , ROUND(AVG(SALARY)),JOB_ID
FROM EMPLOYEES
GROUP BY JOB_ID
order by job_Id asc;

29. 동일한 직업(JOB_ID 동일) 을 가진 사람들의 총 수를 조회한다. (JOB_ID 오름차순)
SELECT JOB_ID, COUNT(EMPLOYEE_ID) 
FROM EMPLOYEES
GROUP BY JOB_ID
order by job_Id;

30. 매니저로 근무하는 사람들의 총 수를 조회한다.
   (서브쿼리 있는 쿼리문으로도 작성해보시오.)
 SELECT COUNT(DISTINCT MANAGER_ID) 
 FROM EMPLOYEES;

30-2 
SELECT COUNT(employee_id) 
from employees
where employee_id in (select manager_id from employees);

31. 사내의 최대 연봉 및 최소 연봉의 차이를 조회한다.

SELECT MAX(SALARY),MIN(SALARY),MAX(SALARY)- MIN(SALARY)
FROM EMPLOYEES;

32. 매니저의 사번 및 그 매니저 밑 사원들 중 최소 연봉을 받는 사원의 연봉을 조회한다.
SELECT MANAGER_ID , MIN(SALARY) 
from employees 
where manager_id is not null 
group by manager_id
order by MIN(SALARY) DESC;

32-1.
SELECT MANAGER_ID , MIN(SALARY) 
from employees 
where manager_id is not null 
group by manager_id
HAVING MIN(SALARY)>=6000
order by MIN(SALARY) DESC;

32-2.
SELECT MIN(SALARY) , MANAGER_ID
from employees
where manager_id is not null AND SALARY >= 6000
group by manager_id
order by MIN(SALARY) DESC;

보너스 1) 매니저의 사번 및 그 매니저 밑 사람들 중 최대 연봉을 받는 사람의 연봉을 조회한다.
SELECT MANAGER_ID , salary , employee_id
from employees
where manager_id is not null and (salary,manager_id) 
in (select MAX(salary),manager_id from employees group by manager_id );

-민준이꺼-
select manager_id, employee_id, max(salary)
from employees
where manager_id is not null
and (salary, manager_id) in (select max(salary), manager_id from employees group by manager_id)
group by manager_id, employee_id;

보너스 2) 매니저의 사번 및 그 매니저 밑 사원들 중 최대 연봉을 받는 사원의 연봉을 조회한다.
단, 연봉이 10000 이하인 경우에만 출력
화면출력 : 매니저 사번 ,사원번호 , 최대연봉

SELECT MANAGER_ID , salary , employee_id
from employees
where manager_id is not null and (salary,manager_id) 
in (select MAX(salary),manager_id from employees where salary <= 10000 group by manager_id );

보너스 3) 매니저의 사번 및 그 매니저 밑 사원들 중 최대 연봉을 받는 사원의 연봉을 조회한다.
단, 초대연봉이 10000이하인 사원의 경우에만 출력

SELECT MANAGER_ID , salary , employee_id
from employees
where manager_id is not null and (salary,manager_id) 
in (select MAX(salary),manager_id from employees group by manager_id HAVING MAX(SALARY) <= 10000 );

보너스 4) 매니저의 사번 및 그 매니저 밑 사원들 중 최대 연봉을 받는 사원의 연봉을 조회한다.
화면출력 : 매니저 사번 , 사원번호 , 부서명 , 최대연봉
SELECT E.MANAGER_ID , E.salary , employee_id , department_name
from departments D , employees E
where D.department_id = E.department_id and E.manager_id is not null 
and (salary,E.manager_id) in (select MAX(salary),manager_id from employees group by manager_id );

과정 1) 매니저별 최대연봉을 구해놓는다.
select MAX(salary),manager_id from employees where manager_id is not null group by manager_id ;

과정 2) 사람의 매니저번호와 연봉정보가 과정1)과 일치하는 사원정보를 출력한다.
SELECT E.MANAGER_ID , E.EMPLOYEE_ID , D.DEPARTMENT_NAME , E.SALARY
 WHERE(E.MANAGER_ID,E.SALARY) in (과정1)

과정 3)부서명을 출력하기 위해 내부조인을 체결한다.
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID

33. 부서 명 , 위치ID ,각 부서 별 사원 총 수 , 각 부서 별 평균 연봉을 조회한다.

select D.department_name AS 부서명 , D.LOCATION_ID AS 위치ID,
COUNT(E.EMPLOYEE_ID) AS 사원총수 ,  ROUND(AVG(E.SALARY),2) AS 평균연봉
FROM EMPLOYEES E , DEPARTMENTS D
WHERE E.dEPARTMENT_ID = D.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_NAME, D.LOCATION_ID;

33-1. 부서명, 지역명, 각 부서 별 사원 총 수, 각 부서 별 평균 연봉을 조회한다.

select D.department_name AS 부서명 , L.CITY AS 지역명,
COUNT(*) AS 사원총수 ,  ROUND(AVG(E.SALARY),2) AS 평균연봉
FROM EMPLOYEES E , DEPARTMENTS D , LOCATIONS L
WHERE E.dEPARTMENT_ID = D.DEPARTMENT_ID AND D.LOCATION_ID = L.LOCATION_ID
GROUP BY D.DEPARTMENT_NAME, L.city;

34. 총 사원 수 및 2005, 2006,2007,2008 년도 별 고용된 사원들의 총 수를 조회한다.

SELECT DISTINCT
 (select COUNT(EMPLOYEE_ID) FROM EMPLOYEES) AS 총사원
,(select count(employee_id) from employees where hire_date like '05%') AS "2005년"
,(select count(employee_id) from employees where hire_date like '06%') AS "2006년"
,(select count(employee_id) from employees where hire_date like '07%') AS "2007년"
,(select count(employee_id) from employees where hire_date like '08%') AS "2008년"
from employees;

35. 각 부서의 직업 별 연봉 총 합 및 각 부서별 연봉 총 합을 조회한다.

SELECT DEPARTMENT_ID , JOB_ID , SUM(SALARY),AS 부서별직업별총합
,(select sum(salary) from employees E1 WHERE E1.DEPARTMENT_ID = E2.DEPARTMENT_ID) AS 부서별총합
FROM EMPLOYEES E2
GROUP BY DEPARTMENT_ID, JOB_ID;

***NVL (판별해야 하는 값, 판별값이 NULL 경우 화면 출력 데이터)
예) SELECT DEPARTMENT_ID, NVL(DEPARTMENT_ID,0)AS 부서명 FROM EMPLOYEES;

36. 각 직업 별 부서별(20,30,50,100 부서만) 연봉의 총 합을 조회한다. (NULL 값인 경우 0으로 표시한다.)

select job_id, nvl(sum(decode(department_id, 20, salary)),0)as "20번 부서"
,nvl(sum(decode(department_id, 30, salary)),0)as "30번 부서"
,nvl(sum(decode(department_id, 50, salary)),0)as "50번 부서"
,nvl(sum(decode(department_id, 100, salary)),0)as "100번 부서"
from employees
group by job_id;

37. LAST_NAME 이 ZLotkey 와 동일한 부서에 근무하는 모든 사원들의 사번 및 고용날짜를 조회한다.
SELECT EMPLOYEE_ID, HIRE_DATE
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME = 'Zlotkey')
AND LAST_NAME != 'Zlotkey';

38. LAST_NAME 에 u 가 포함되는 사원들과 동일 부서에 근무하는 사원들의 사번 및 LAST_NAME 을 조회한다.
SELECT EMPLOYEE_ID, LAST_NAME FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE LAST_NAME LIKE '%u%');

39. 커미션을 버는 사원들의 부서와 연봉이 동일한 사원들의 LAST_NAME , 부서 번호 및 연봉을 조회한다.
SELECT LAST_NAME , employee_Id,  SALARY from employees
where (department_id , salary) in 
(select department_id , salary from employees where commission_PCT is not null);


*** 조인문 연습 ***
J-1) 급여가 3000이상인 사원번호, LAST_NAME, SALARY, 부서명, 도시명을 조회하시오.
select employee_id , last_name , salary , department_name ,city
from DEPARTMENTS D , EMPLOYEES E , LOCATIONS L
where D.department_id = E.department_id and D.Location_id = D.location_id and salary >= 3000;

J-2) 급여가 2500 이하이고 사원번호가 200이하인 사원의 LAST_NAME, 부서명을 조회하시오.
select last_name , department_name
from DEPARTMENTS D , EMPLOYEES E
where D.department_id = E.department_id and salary <= 2500 and employee_id <= 200;

J-3) 급여범위가 JOBS 테이블의 최소급여(MIN_SALARY)와 최대급여(MAX_SALARY) 사이에 있는 사원의 LAST_NAME, JOB_ID를 조회하시오.
select LAST_NAME , E.JOB_ID 
from EMPLOYEES E , JOBS J
where E.JOB_ID = J.JOB_ID and salary  between MIN_SALARY and MAX_SALARY; --------등가조인----------

select LAST_NAME , E.JOB_ID
from EMPLOYEES E , JOBS J
where salary  between MIN_SALARY and MAX_SALARY;                         ----------비등가 조인------------


J-4)자신의 매니저보다 먼저 고용된 사원들의 LAST_NAME 및 고용일을 조회한다.
select EMP.last_name , EMP.hire_date 
from employees EMP , employees MGR
WHERE EMP.manager_id = MGR.employee_id
AND EMP.HIRE_DATE < MGR.HIRE_DATE;



J-5) 사원정보(EMPLOYEE_ID,LAST_NAME, MANAGER_ID)와 사원의 직속 상관정보(EMPLOYEE_ID,LAST_NAME) 조회하시오.  ---셀프 + 외부조인
select EMP.EMPLOYEE_ID,EMP.LAST_NAME , EMP.MANAGER_ID , MGR.EMPLOYEE_ID , MGR.LAST_NAME
from employees EMP , employees MGR
where EMP.manager_Id = MGR.employee_id(+)
order by EMP.employee_Id;
